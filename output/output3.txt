Token            Lexeme
------------------------------
Separator    | $
Keyword      | function
Identifier   | calculateArea
Separator    | (
Identifier   | length
Keyword      | real
Separator    | ,
Identifier   | width
Keyword      | real
Separator    | )
Separator    | {
Keyword      | return
Identifier   | length
Operator     | *
Identifier   | width
Separator    | ;
Separator    | }
Separator    | $
Keyword      | integer
Identifier   | low
Separator    | ,
Identifier   | high
Separator    | ,
Identifier   | step
Separator    | ;
Separator    | $
Keyword      | scan
Separator    | (
Identifier   | low
Separator    | ,
Identifier   | high
Separator    | ,
Identifier   | step
Separator    | )
Separator    | ;
Keyword      | while
Separator    | (
Identifier   | low
Operator     | <=
Identifier   | high
Separator    | )
Separator    | {
Keyword      | print
Separator    | (
Identifier   | low
Separator    | )
Separator    | ;
Keyword      | print
Separator    | (
Identifier   | calculateArea
Separator    | (
Identifier   | low
Separator    | ,
Identifier   | width
Separator    | )
Separator    | )
Separator    | ;
Invalid      | #
Identifier   | Calculate
Identifier   | area
Identifier   | with
Identifier   | given
Identifier   | length
Identifier   | and
Identifier   | width
Identifier   | low
Operator     | =
Identifier   | low
Operator     | +
Identifier   | step
Separator    | ;
Separator    | }
Keyword      | endwhile
Separator    | $
Invalid      | #
Identifier   | Additional
Identifier   | lines
Keyword      | integer
Identifier   | i
Separator    | ,
Identifier   | j
Separator    | ;
Keyword      | real
Identifier   | pi
Separator    | ;
Keyword      | boolean
Identifier   | flag
Separator    | ;
Identifier   | string
Identifier   | message
Separator    | ;
Separator    | $
Keyword      | scan
Separator    | (
Identifier   | i
Separator    | ,
Identifier   | j
Separator    | ,
Identifier   | pi
Separator    | ,
Identifier   | flag
Separator    | ,
Identifier   | message
Separator    | )
Separator    | ;
Keyword      | if
Separator    | (
Identifier   | flag
Separator    | )
Separator    | {
Keyword      | print
Separator    | (
Invalid      | "Flag
Identifier   | is
Keyword      | true
Invalid      | .");
Separator    | }
Keyword      | else
Separator    | {
Keyword      | print
Separator    | (
Invalid      | "Flag
Identifier   | is
Keyword      | false
Invalid      | .");
Separator    | }
Identifier   | pi
Operator     | =
Real         | 3.14159;
Invalid      | 
print("The
Identifier   | value
Identifier   | of
Identifier   | pi
Invalid      | is:
Invalid      | ",
Identifier   | pi
Separator    | )
Separator    | ;
Keyword      | while
Separator    | (
Identifier   | i
Operator     | <
Identifier   | j
Separator    | )
Separator    | {
Keyword      | print
Separator    | (
Identifier   | i
Separator    | )
Separator    | ;
Identifier   | i
Operator     | =
Identifier   | i
Operator     | +
Integer      | 1
Separator    | ;
Separator    | }
Keyword      | print
Separator    | (
Invalid      | "End
Identifier   | of
Invalid      | program.");
Separator    | $

Syntax Analysis:
------------------------------
<Rat24S> ::= $ <Opt Function Definitions> $ <Opt Declaration List> $ <Statement List> $
Token: Separator Lexeme: $
<Opt Function Definitions> ::= <Function Definitions> | <Empty>
<Function Definitions> ::= <Function> <Function Definitions'>
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: Keyword Lexeme: function
Token: Identifier Lexeme: calculateArea
Token: Separator Lexeme: (
<Opt Parameter List> ::= <Parameter List> | <Empty>
<Parameter> ::= <IDs> <Qualifier>
<IDs> ::= <Identifier> <IDs'>
Token: Identifier Lexeme: length
<IDs'> ::= , <IDs> | epsilom
<Qualifier> ::= integer | boolean | real
Token: Keyword Lexeme: real
Unexpected token 'Separator' with lexeme ','. Error type: ) expected
Unexpected token 'Separator' with lexeme ','. Error type: second $ expected
