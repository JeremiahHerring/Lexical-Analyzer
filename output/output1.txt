Token            Lexeme
------------------------------
Separator    | $
Separator    | $
Keyword      | integer
Identifier   | i
Separator    | ,
Identifier   | max
Separator    | ,
Identifier   | sum
Separator    | ;
Separator    | $
Identifier   | sum
Operator     | =
Integer      | 0
Separator    | ;
Identifier   | i
Operator     | =
Integer      | 1
Separator    | ;
Keyword      | scan
Separator    | (
Identifier   | max
Separator    | )
Separator    | ;
Keyword      | while
Separator    | (
Identifier   | i
Operator     | <
Identifier   | max
Separator    | )
Separator    | {
Identifier   | sum
Operator     | =
Identifier   | sum
Operator     | +
Identifier   | i
Separator    | ;
Identifier   | i
Operator     | =
Identifier   | i
Operator     | +
Integer      | 1
Separator    | ;
Separator    | }
Keyword      | endwhile
Keyword      | print
Separator    | (
Identifier   | sum
Operator     | +
Identifier   | max
Separator    | )
Separator    | ;
Separator    | $

Syntax Analysis:
------------------------------
<Rat24S> ::= $ <Opt Function Definitions> $ <Opt Declaration List> $ <Statement List> $
Token: Separator Lexeme: $
<Opt Function Definitions> ::= <Function Definitions> | <Empty>
<Empty> ::= epsilon
Token: Separator Lexeme: $
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Declaration List> ::= <Declaration> ; <Declaration List'>
<Declaration> ::= <Qualifier> <IDs>
<Qualifier> ::= integer | boolean | real
Token: Keyword Lexeme: integer
<IDs> ::= <Identifier> <IDs'>
Token: Identifier Lexeme: i
<IDs'> ::= , <IDs> | epsilon
Token: Separator Lexeme: ,
<IDs> ::= <Identifier> <IDs'>
Token: Identifier Lexeme: max
<IDs'> ::= , <IDs> | epsilon
Token: Separator Lexeme: ,
<IDs> ::= <Identifier> <IDs'>
Token: Identifier Lexeme: sum
<IDs'> ::= , <IDs> | epsilon
Token: Separator Lexeme: ;
<Declaration List'> ::= <Declaration List> | epsilon
Token: Separator Lexeme: $
<Statement List> ::= <Statement> <Statement List'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: Identifier Lexeme: sum
Token: Operator Lexeme: =
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Integer Lexeme: 0
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | epsilon
Token: Separator Lexeme: ;
<Statement List'> ::= <Statement List> | epsilon
<Statement List> ::= <Statement> <Statement List'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: Identifier Lexeme: i
Token: Operator Lexeme: =
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Integer Lexeme: 1
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | epsilon
Token: Separator Lexeme: ;
<Statement List'> ::= <Statement List> | epsilon
<Statement List> ::= <Statement> <Statement List'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Scan> ::= scan ( <IDs> );
Token: Keyword Lexeme: scan
Token: Separator Lexeme: (
<IDs> ::= <Identifier> <IDs'>
Token: Identifier Lexeme: max
<IDs'> ::= , <IDs> | epsilon
Token: Separator Lexeme: )
Token: Separator Lexeme: ;
<Statement List'> ::= <Statement List> | epsilon
<Statement List> ::= <Statement> <Statement List'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<While> ::= while ( <Condition> ) <Statement> endwhile
Token: Keyword Lexeme: while
Token: Separator Lexeme: (
<Condition> ::= <Expression> <Relop> <Expression>
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Identifier Lexeme: i
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | epsilon
<Relop> ::= == | != | > | < | <= | =>
Token: Operator Lexeme: <
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Identifier Lexeme: max
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | epsilon
Token: Separator Lexeme: )
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Compound> ::= { <Statement List> }
Token: Separator Lexeme: {
<Statement List> ::= <Statement> <Statement List'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: Identifier Lexeme: sum
Token: Operator Lexeme: =
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Identifier Lexeme: sum
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | epsilon
Token: Operator Lexeme: +
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Identifier Lexeme: i
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
Token: Separator Lexeme: ;
<Statement List'> ::= <Statement List> | epsilon
<Statement List> ::= <Statement> <Statement List'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: Identifier Lexeme: i
Token: Operator Lexeme: =
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Identifier Lexeme: i
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | epsilon
Token: Operator Lexeme: +
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Integer Lexeme: 1
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
Token: Separator Lexeme: ;
<Statement List'> ::= <Statement List> | epsilon
Token: Separator Lexeme: }
Token: Keyword Lexeme: endwhile
<Statement List'> ::= <Statement List> | epsilon
<Statement List> ::= <Statement> <Statement List'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Print> ::= print ( <Expression> );
Token: Keyword Lexeme: print
Token: Separator Lexeme: (
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Identifier Lexeme: sum
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | epsilon
Token: Operator Lexeme: +
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> <Primary’> |  <Integer> <Primary’> | <Real> <Primary’> | true <Primary’> | false <Primary’> | ( <Expression> ) <Primary’>
Token: Identifier Lexeme: max
<Primary’> ::= ( <IDs> ) <Primary’> | epsilon
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | epsilon
Token: Separator Lexeme: )
Token: Separator Lexeme: ;
<Statement List'> ::= <Statement List> | epsilon
Token: Separator Lexeme: $
end of list
